{
  "_args": [
    [
      {
        "raw": "jsmediatags",
        "scope": null,
        "escapedName": "jsmediatags",
        "name": "jsmediatags",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "F:\\hard\\sem 6\\software enginerring\\project\\music_app"
    ]
  ],
  "_from": "jsmediatags@latest",
  "_id": "jsmediatags@3.8.1",
  "_inCache": true,
  "_location": "/jsmediatags",
  "_nodeVersion": "8.1.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jsmediatags-3.8.1.tgz_1509081610885_0.07040940038859844"
  },
  "_npmUser": {
    "name": "aadsm",
    "email": "antonio.afonso@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jsmediatags",
    "scope": null,
    "escapedName": "jsmediatags",
    "name": "jsmediatags",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jsmediatags/-/jsmediatags-3.8.1.tgz",
  "_shasum": "e27d26e957b0b330c28f9762c82940c4dcc64720",
  "_shrinkwrap": null,
  "_spec": "jsmediatags",
  "_where": "F:\\hard\\sem 6\\software enginerring\\project\\music_app",
  "author": {
    "name": "António Afonso",
    "email": "antonio.afonso@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/aadsm/jsmediatags/issues"
  },
  "contributors": [
    {
      "name": "Jacob Seidelin"
    },
    {
      "name": "Joshua Kifer"
    },
    {
      "name": "Jesse Ditson",
      "email": "jesse.ditson@gmail.com"
    }
  ],
  "dependencies": {
    "xhr2": "^0.1.4"
  },
  "description": "Media Tags Reader (ID3, MP4)",
  "devDependencies": {
    "babel-cli": "~6.26.0",
    "babel-core": "~6.26.0",
    "babel-jest": "~20.0.3",
    "babel-plugin-transform-class-properties": "~6.24.1",
    "babel-plugin-transform-es2015-block-scoping": "~6.26.0",
    "babel-plugin-transform-es2015-classes": "~6.24.1",
    "babel-plugin-transform-es2015-modules-commonjs": "~6.26.0",
    "babel-plugin-transform-flow-strip-types": "~6.22.0",
    "babelify": "~7.3.0",
    "browserify": "~14.4.0",
    "flow-bin": "~0.53.1",
    "google-closure-compiler": "20170626.0.0",
    "jest-cli": "~20.0.4",
    "watchify": "~3.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ZI4P8J0gDiM9BgkTC0QbPARFkWaFscGAJKnpL/UK2Xeux026R5ytChvx4OJAn7kxoYFqpVUeSTEToBVe+K4yhQ==",
    "shasum": "e27d26e957b0b330c28f9762c82940c4dcc64720",
    "tarball": "https://registry.npmjs.org/jsmediatags/-/jsmediatags-3.8.1.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/aadsm/jsmediatags#readme",
  "jest": {
    "rootDir": "./src",
    "timers": "fake",
    "transform": {
      ".js$": "babel-jest"
    }
  },
  "keywords": [
    "ID3",
    "tags",
    "mp3",
    "audio",
    "mp4"
  ],
  "license": "BSD-3-Clause",
  "main": "build2/jsmediatags.js",
  "maintainers": [
    {
      "name": "aadsm",
      "email": "antonio.afonso@gmail.com"
    }
  ],
  "name": "jsmediatags",
  "optionalDependencies": {},
  "readme": "# JS MediaTags\n\nThe next version of https://github.com/aadsm/JavaScript-ID3-Reader.\n\n## Donations\nA few people have asked me about donations (or even crowdfunding). I would prefer you to consider making a donation to the [\"Girls Who Code\" NPO](https://www.classy.org/checkout/donation?eid=77372). If you do please send me a message so I can add you as a contributor.\n\n## [Contributors](https://github.com/aadsm/jsmediatags/blob/master/CONTRIBUTORS.md)\n\n## [Contributing](https://github.com/aadsm/jsmediatags/blob/master/CONTRIBUTING.md)\n\n## Current Support\n\n* File Readers\n  * NodeJS\n  * XMLHttpRequest\n  * Blob\n  * File\n  * Buffers/Arrays\n* Tag Readers\n  * ID3v1\n  * ID3v2 (with unsynchronisation support!)\n  * MP4\n  * FLAC\n\n## How to use\n\n### NodeJS\n\nRun `npm install jsmediatags --save` to install.\n\n```javascript\n// Simple API - will fetch all tags\nvar jsmediatags = require(\"jsmediatags\");\n\njsmediatags.read(\"./music-file.mp3\", {\n  onSuccess: function(tag) {\n    console.log(tag);\n  },\n  onError: function(error) {\n    console.log(':(', error.type, error.info);\n  }\n});\n```\n\n```javascript\n// Advanced API\nvar jsmediatags = require(\"jsmediatags\");\n\nnew jsmediatags.Reader(\"http://www.example.com/music-file.mp3\")\n  .setTagsToRead([\"title\", \"artist\"])\n  .read({\n    onSuccess: function(tag) {\n      console.log(tag);\n    },\n    onError: function(error) {\n      console.log(':(', error.type, error.info);\n    }\n  });\n```\n\n### Browser\n\nCopy the [`dist/jsmediatags.min.js`](https://github.com/aadsm/jsmediatags/blob/master/dist/jsmediatags.min.js) file into your web application directory and include it with a script tag.\nThis library is also available on cdnjs at https://cdnjs.com/libraries/jsmediatags.\nUMD will give you multiple usage options to use it:\n\n```javascript\n// As a global Object\nvar jsmediatags = window.jsmediatags;\n```\n```javascript\n// As a CommonJS Module\nvar jsmediatags = require(\"jsmediatags\");\n```\n\nIt supports loading files from remote hosts, Blob and File objects:\n```javascript\n// From remote host\njsmediatags.read(\"http://www.example.com/music-file.mp3\", {\n  onSuccess: function(tag) {\n    console.log(tag);\n  },\n  onError: function(error) {\n    console.log(error);\n  }\n});\n```\n```javascript\n// From Blob\njsmediatags.read(blob, ...);\n```\n```javascript\n// From File\ninputTypeFile.addEventListener(\"change\", function(event) {\n  var file = event.target.files[0];\n  jsmediatags.read(file, ...);\n}, false);\n```\n\nYou can find more about UMD usage options [here](http://www.forbeslindesay.co.uk/post/46324645400/standalone-browserify-builds).\n\n### Articles\n\n* [Cordova : lire les metadatas des mp3s avec jsmediatags](http://blog.luce.pro/2016/02/28/Phonegap-lire-les-metadatas-des-mp3s-avec-jsmediatags/)\n\n## Documentation\n\n### The Output\nThis is an example of the object passed to the `jsmediatags.read`'s `onSuccess` callback.\n\n#### ID3v2\n```javascript\n{\n  type: \"ID3\",\n  version: \"2.4.0\",\n  major: 4,\n  revision: 0,\n  tags: {\n    artist: \"Sam, The Kid\",\n    album: \"Pratica(mente)\",\n    track: \"12\",\n    TPE1: {\n      id: \"TPE1\",\n      size: 14,\n      description: \"Lead performer(s)/Soloist(s)\",\n      data: \"Sam, The Kid\"\n    },\n    TALB: {\n      id: \"TALB\",\n      size: 16,\n      description: \"Album/Movie/Show title\",\n      data: \"Pratica(mente)\"\n    },\n    TRCK: {\n      id: \"TRCK\",\n      size: 3,\n      description: \"Track number/Position in set\",\n      data: \"12\",\n    }\n  },\n  size: 34423,\n  flags: {\n    unsynchronisation: false,\n    extended_header: false,\n    experimental_indicator: false,\n    footer_present: false\n  }\n}\n```\n\n#### MP4\n```javascript\n{\n  type: \"MP4\",\n  ftyp: \"M4A\",\n  version: 0,\n  tags: {\n    \"©too\": {\n      id: \"©too\",\n      size: 35,\n      description: 'Encoding Tool',\n      data: 'Lavf53.24.2'\n    }\n  }\n}\n```\n\n#### FLAC\n```javascript\n{\n  type: \"FLAC\",\n  version: \"1\",\n  tags: {\n    title: \"16/12/95\",\n    artist: \"Sam, The Kid\",\n    album: \"Pratica(mente)\",\n    track: \"12\",\n    picture: ...\n  }\n}\n```\n\nThe `tags` property includes all tags that were found or specified to be read.\nSince each tag type (e.g.: ID3, MP4) uses different tag names for the same type of data (e.g.: the artist name) the most common tags are also available under human readable names (aka shortcuts). In this example, `artist` will point to `TPE1.data`, `album` to `TALB.data` and so forth.\n\nThe expected tag object depends on the type of tag read (ID3, MP4, etc.) but they all share a common structure:\n\n```\n{\n  type: <the tag type: ID3, MP4, etc.>\n  tags: {\n    <shortcut name>: <points to a tags data>\n    <tag name>: {\n      id: <tag name>,\n      data: <the actual tag data>\n    }\n  }\n}\n```\n\n### Shortcuts\n\nThese are the supported shortcuts.\n\n* `title`\n* `artist`\n* `album`\n* `year`\n* `comment`\n* `track`\n* `genre`\n* `picture`\n* `lyrics`\n\n### HTTP Access Control (CORS)\n\nWhen using HTTP [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) requests you need to make sure that the server is configured to receive `If-Modified-Since` and `Range` headers with the request.\nThis can be configured by returning the `Access-Control-Allow-Headers` HTTP header with the OPTIONS request response.\n\nSimilarly, you should also allow for the browser to read the `Content-Length` and `Content-Range` headers. This can be configured by returning the  `Access-Control-Expose-Headers` HTTP header.\n\nIn short, the following headers are expected:\n```\nAccess-Control-Allow-Headers: If-Modified-Since, Range\nAccess-Control-Expose-Headers: Content-Length, Content-Range\n```\n\nThis library still works without these options configured on the server. However it will download the entire file instead of only the necessary bytes for reading the tags.\n\n### File and Tag Readers\n\nThis library uses file readers (MediaFileReader API) to read the file itself and media tag readers (MediaTagReader API) to parse the tags in the file.\n\nBy default the library will automatically pick the most appropriate file reader depending on the file location. In the common case this will be the URL or local path where the file is located.\n\nA similar approach is taken for the tag reader. The most appropriate tag reader will be selected depending on the tag signature found in the file.\n\nHowever, you can specify exactly which file reader or tag reader to use using the advanced API.\n\nNew file and tag readers can be implemented by extending the MediaFileReader and MediaTagReader classes. Check the `Development` section down bellow for more information.\n\n### Reference\n\n* `jsmediatags.Reader`\n  * `setTagsToRead(tags: Array<string>)` - Specify which tags to read\n  * `setFileReader(fileReader: typeof MediaFileReader)` - Use this particular file reader\n  * `setTagReader(tagReader: typeof MediaTagReader)` - Use this particular tag reader\n  * `read({onSuccess, onError})` - Read the tags.\n\n* `jsmediatags.Config`\n  * `addFileReader(fileReader: typeof MediaFileReader)` - Add a new file reader to the automatic detection system.\n  * `addTagReader(tagReader: typeof MediaTagReader)` - Add a new tag reader to the automatic detection system.\n  * `setDisallowedXhrHeaders(disallowedXhrHeaders: Array<string>)` - Prevent the library from using specific http headers. This can be useful when dealing with CORS enabled servers you don't control.\n  * `setXhrTimeoutInSec(timeoutInSec: number)` - Sets the timeout time for http requests. Set it to 0 for no timeout at all. It defaults to 30s.\n\n## Development\n\nSource code uses Flow for type checking meaning that a compilation step is needed to remove all type annotations.\nWhen using this library with NodeJS you can use the runtime compilation that is supported by babel. It will be slightly slower but no compilation step is required.\n\n### NodeJS (With Runtime Compilation)\n\n```javascript\nrequire('babel-core/register');\n\nvar NodeFileReader = require('./src/NodeFileReader');\nvar ID3v2TagReader = require('./src/ID3v2TagReader');\n...\n```\n\n### NodeJS (With Compiled Code (faster))\n\nRun `npm run build` to generate proper JavaScript code into the `build2` directory.\n\n```javascript\nvar NodeFileReader = require('./build2/NodeFileReader');\nvar ID3v2TagReader = require('./build2/ID3v2TagReader');\n...\n```\n\nRun `npm run watch` to automatically recompile the source code whenever a file is changed.\n\n### Browser\n\nRun `npm run dist` to generate a UMD version of this library that is ready to be used in a browser.\n\nTwo packages are created for the browser: `dist/jsmediatags.min.js` and `dist/jsmediatags.js`. One is a minimized version that is meant to be used in production and the other a regular version meant to be used for debugging.\n\nRun `npm run dist-watch` to recompile and browserify the source code whenever a file is changed. This will only regenerate the `dist/jsmediatags.js` file.\n\n### New File Readers\n\nExtend the `MediaFileReader` class to implement a new file reader. Methods to implement are:\n\n* init\n* loadRange\n* getBytesLoaded\n* getByteAt\n\nCurrent Implementations:\n* [NodeFileReader](https://github.com/aadsm/jsmediatags/blob/master/src/NodeFileReader.js) (NodeJS)\n* [XhrFileReader](https://github.com/aadsm/jsmediatags/blob/master/src/XhrFileReader.js) (Browser and NodeJS)\n* [BlobFileReader](https://github.com/aadsm/jsmediatags/blob/master/src/BlobFileReader.js) (Blob and File)\n\n\n### New Tag Readers\n\nExtend the `MediaTagReader` class to implement a new tag reader. Methods to implement are:\n\n* getTagIdentifierByteRange\n* canReadTagFormat\n* \\_loadData\n* \\_parseData\n\nCurrent Implementations:\n* [ID3v1TagReader](https://github.com/aadsm/jsmediatags/blob/master/src/ID3v1TagReader.js)\n* [ID3v2TagReader](https://github.com/aadsm/jsmediatags/blob/master/src/ID3v2TagReader.js)\n* [MP4TagReader](https://github.com/aadsm/jsmediatags/blob/master/src/MP4TagReader.js)\n\n### Unit Testing\n\nJest is the framework used. Run `npm test` to execute all the tests.\n\n## JavaScript-ID3-Reader\nIf you want to migrate your project from [JavaScript-ID3-Reader](https://github.com/aadsm/JavaScript-ID3-Reader) to `jsmediatags` use the following guiding examples:\n\n### All tags\n**JavaScript-ID3-Reader:**\n```javascript\nID3.loadTags(\"filename.mp3\", function() {\n  var tags = ID3.getAllTags(\"filename.mp3\");\n  alert(tags.artist + \" - \" + tags.title + \", \" + tags.album);\n});\n```\n**jsmediatags:**\n```javascript\njsmediatags.read(\"filename.mp3\", {\n  onSuccess: function(tag) {\n    var tags = tag.tags;\n    alert(tags.artist + \" - \" + tags.title + \", \" + tags.album);\n  }\n});\n```\n\n### Specific tags\n**JavaScript-ID3-Reader:**\n```javascript\nID3.loadTags(\"filename.mp3\", function() {\n  var tags = ID3.getAllTags(\"filename.mp3\");\n  alert(tags.COMM.data + \" - \" + tags.TCON.data + \", \" + tags.WXXX.data);\n},\n{tags: [\"COMM\", \"TCON\", \"WXXX\"]});\n```\n**jsmediatags:**\n```javascript\nnew jsmediatags.Reader(\"filename.mp3\")\n  .setTagsToRead([\"COMM\", \"TCON\", \"WXXX\"])\n  .read({\n    onSuccess: function(tag) {\n      var tags = tag.tags;\n      alert(tags.COMM.data + \" - \" + tags.TCON.data + \", \" + tags.WXXX.data);\n    }\n  });\n```\n### Error handling\n**JavaScript-ID3-Reader:**\n```javascript\nID3.loadTags(\"http://localhost/filename.mp3\", function() {\n  var tags = ID3.getAllTags(\"http://localhost/filename.mp3\");\n  alert(tags.comment + \" - \" + tags.track + \", \" + tags.lyrics);\n},\n{\n  tags: [\"comment\", \"track\", \"lyrics\"],\n  onError: function(reason) {\n    if (reason.error === \"xhr\") {\n      console.log(\"There was a network error: \", reason.xhr);\n    }\n  }\n});\n```\n**jsmediatags:**\n```javascript\nnew jsmediatags.Reader(\"filename.mp3\")\n  .setTagsToRead([\"comment\", \"track\", \"lyrics\"])\n  .read({\n    onSuccess: function(tag) {\n      var tags = tag.tags;\n      alert(tags.comment + \" - \" + tags.track + \", \" + tags.lyrics);\n    },\n    onError: function(error) {\n      if (error.type === \"xhr\") {\n        console.log(\"There was a network error: \", error.xhr);\n      }\n    }\n  });\n```\n\n## Goals\n\n* Improve the API of JavaScript-ID3-Reader\n* Improve the source code with readable code and Flow annotated types\n* Have unit tests\n* Support NodeJS\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aadsm/jsmediatags.git"
  },
  "scripts": {
    "build": "babel src --ignore __tests__,__mocks,FlowTypes.js --out-dir build2",
    "dist": "npm run dist-dev && java -jar node_modules/google-closure-compiler/compiler.jar --warning_level QUIET --compilation_level SIMPLE_OPTIMIZATIONS --js dist/jsmediatags.js > dist/jsmediatags.min.js",
    "dist-dev": "mkdir -p dist && browserify src/jsmediatags.js --detect-globals false -i ./src/NodeFileReader.js -o dist/jsmediatags.js -s jsmediatags -t babelify",
    "dist-watch": "mkdir -p dist && watchify src/jsmediatags.js -v --detect-globals false -i ./src/NodeFileReader.js -o dist/jsmediatags.js -s jsmediatags -t babelify",
    "test": "jest",
    "watch": "babel --ignore __tests__,__mocks,FlowTypes.js --watch src --out-dir build2"
  },
  "version": "3.8.1"
}
