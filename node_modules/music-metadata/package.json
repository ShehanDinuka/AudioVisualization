{
  "_args": [
    [
      {
        "raw": "music-metadata",
        "scope": null,
        "escapedName": "music-metadata",
        "name": "music-metadata",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "F:\\hard\\sem 6\\software enginerring\\project\\music_app"
    ]
  ],
  "_from": "music-metadata",
  "_hasShrinkwrap": false,
  "_id": "music-metadata@3.5.0",
  "_location": "/music-metadata",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/music-metadata_3.5.0_1546602414310_0.10531628862194875"
  },
  "_npmUser": {
    "name": "borewit",
    "email": "borewit@xs4all.nl"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "music-metadata",
    "scope": null,
    "escapedName": "music-metadata",
    "name": "music-metadata",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/music-metadata/-/music-metadata-3.5.0.tgz",
  "_shasum": "5a5ad0cdb9f421314f5a19674482c74f7a2603c4",
  "_shrinkwrap": null,
  "_spec": "music-metadata",
  "_where": "F:\\hard\\sem 6\\software enginerring\\project\\music_app",
  "author": {
    "name": "Borewit",
    "url": "https://github.com/Borewit"
  },
  "bugs": {
    "url": "https://github.com/Borewit/music-metadata/issues"
  },
  "dependencies": {
    "debug": "^4.1.0",
    "file-type": "^10.5.0",
    "media-typer": "0.3.0",
    "strtok3": "^2.3.0",
    "token-types": "^1.0.1"
  },
  "description": "Streaming music metadata parser for node and the browser.",
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/debug": "^0.0.31",
    "@types/file-type": "^5.2.1",
    "@types/mocha": "^5.2.5",
    "@types/node": "^10.12.9",
    "chai": "^4.2.0",
    "coveralls": "^3.0.2",
    "del-cli": "^1.1.0",
    "mime": "^2.3.1",
    "mocha": "^5.2.0",
    "npm-run-all": "^4.1.3",
    "nyc": "^13.1.0",
    "remark-cli": "^6.0.1",
    "remark-preset-lint-recommended": "^3.0.2",
    "ts-node": "^7.0.1",
    "tslint": "^5.11.0",
    "typescript": "^3.1.6"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-2HgRK+mwu32GJ0L7GIo0MYLSnYoj4Fr8YPTQk7PrHu0vwxjkS8WnIjNJCCQmKAgufmsFhYMu28whuShVbxZVaw==",
    "shasum": "5a5ad0cdb9f421314f5a19674482c74f7a2603c4",
    "tarball": "https://registry.npmjs.org/music-metadata/-/music-metadata-3.5.0.tgz",
    "fileCount": 134,
    "unpackedSize": 356041,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcL0evCRA9TVsSAnZWagAAExcP/1lfkJ0Zro1l0QDmuVAb\nFbJXcojkHPTh611m7+erY81KgNU6LWi+pPVxF5YRRcJD1XGNDumjpXuskXrZ\n3XjdcHMMlh1a7FRKgMl2DoKbwjP8UosSnjMLOFmO4YdnvHIUv9m/u155s4+z\n9yKZWiVEsZxgeYePCfBA7IFY0UsbwFRPx91g+w0HRSMq3qggBvrK3wN2v3ar\novo/Z+Ta64tBK2uO98l/OdbvlGKvknx2nCBsqzloIPiUabjsK0gWbBI/Hpf7\nZf8BXa8btc8TEVaB0cUvdOZ9CFedrXI8n/WAbcAD3Oak8maKz9Gkh5v3MsIw\n0wM2f1bxE2DHT7H301yuzQA+SMNTu8iXUSUVVQ4MEs/AZEqMEVAsIzZ6Lf0x\nQxhd5T+T0RkuO8UnFNk+SwBKgEia8h5vXT5bDQK9yq/3SsmYrFeWisF7HvQv\nSk0MOkDcYJcjfo69jxXTSBNgMWb4i2Q8uIHN8wmJ4pV1xyo9bqhb6tystjWC\nBTu4STklDGnjyrkrUaRCOddiLmhamWesdELpk6ljCs+ADT5hoYjzxVx1dTKi\njczH2JczRjc0zyU8hK3G+LdaaiI7+8e556zw+mvEL76joKCsqQ/LileyVhMF\niOYo4fOGGJieQ5kNbmGYn158pvGQQcMAAM5jERoNCK5hXuHBvoBIp6NbLIHN\nIaiW\r\n=Xu89\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "*"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "0d5edc52272a20b71011e95281f49a8cc69fac5a",
  "homepage": "https://github.com/borewit/music-metadata#readme",
  "keywords": [
    "music",
    "metadata",
    "meta",
    "audio",
    "tag",
    "tags",
    "MusicBrainz",
    "Discogs",
    "Picard",
    "ID3",
    "ID3v1",
    "ID3v2",
    "m4a",
    "mp3",
    "mp4",
    "Vorbis",
    "ogg",
    "flac",
    "asf",
    "wma",
    "wmv",
    "ape",
    "MonkeyAudio",
    "aiff",
    "wav",
    "WavPack",
    "Opus",
    "speex",
    "musepack",
    "mpc"
  ],
  "license": "MIT",
  "main": "lib",
  "maintainers": [
    {
      "name": "borewit",
      "email": "borewit@xs4all.nl"
    }
  ],
  "name": "music-metadata",
  "nyc": {
    "check-coverage": true,
    "include": [
      "src/**/*"
    ],
    "reporter": [
      "lcov",
      "text"
    ],
    "report-dir": "coverage"
  },
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/Borewit/music-metadata.svg?branch=master)](https://travis-ci.org/Borewit/music-metadata)\n[![Build status](https://ci.appveyor.com/api/projects/status/tgtqynlon8t99qq5/branch/master?svg=true)](https://ci.appveyor.com/project/Borewit/music-metadata/branch/master)\n[![NPM version](https://img.shields.io/npm/v/music-metadata.svg)](https://npmjs.org/package/music-metadata)\n[![npm downloads](http://img.shields.io/npm/dm/music-metadata.svg)](https://npmjs.org/package/music-metadata)\n[![Coverage Status](https://coveralls.io/repos/github/Borewit/music-metadata/badge.svg?branch=master)](https://coveralls.io/github/Borewit/music-metadata?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/57d731b05c9e41889a2a17cb4b0384d7)](https://app.codacy.com/app/Borewit/music-metadata?utm_source=github.com&utm_medium=referral&utm_content=Borewit/music-metadata&utm_campaign=Badge_Grade_Dashboard)\n[![Dependencies](https://david-dm.org/Borewit/music-metadata.svg)](https://david-dm.org/Borewit/music-metadata)\n[![Known Vulnerabilities](https://snyk.io/test/github/Borewit/music-metadata/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Borewit/music-metadata?targetFile=package.json)\n[![Discord](https://img.shields.io/discord/460524735235883049.svg)](https://discord.gg/KyBr6sb)\n\n# music-metadata\n\nStream and file based music metadata parser for node.\n\n## Features\n\n*   Supports metadata of the following audio and tag types:\n\n### Support for audio file types\n\n| Audio format  | Description                     | Wiki                                                               |                                                                                                                                               |\n| ------------- |---------------------------------| -------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------:|\n| AIFF / AIFF-C | Audio Interchange File Format   | [:link:](https://wikipedia.org/wiki/Audio_Interchange_File_Format) | <img src=\"https://upload.wikimedia.org/wikipedia/commons/8/84/Apple_Computer_Logo_rainbow.svg\" width=\"40\" alt=\"Apple rainbow logo\">           |\n| APE           | Monkey's Audio                  | [:link:](https://wikipedia.org/wiki/Monkey's_Audio)                | <img src=\"https://foreverhits.files.wordpress.com/2015/05/ape_audio.jpg\" width=\"40\" alt=\"Monkey's Audio logo\">                                |\n| ASF           | Advanced Systems Format         | [:link:](https://wikipedia.org/wiki/Advanced_Systems_Format)       |                                                                                                                                               |\n| FLAC          | Free Lossless Audio Codec       | [:link:](https://wikipedia.org/wiki/FLAC)                          | <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/e0/Flac_logo_vector.svg\" width=\"80\" alt=\"FLAC logo\">                               |\n| MP2           | MPEG-1 Audio Layer II           | [:link:](https://wikipedia.org/wiki/MPEG-1_Audio_Layer_II)         |                                                                                                                                               |\n| MP3           | MPEG-1 / MPEG-2 Audio Layer III | [:link:](https://wikipedia.org/wiki/MP3)                           | <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/Mp3.svg\" width=\"80\" alt=\"MP3 logo\">                                             |\n| MPC           | Musepack SV7                    | [:link:](https://wikipedia.org/wiki/Musepack)                      | <img src=\"https://www.musepack.net/pictures/musepack_logo.png\" width=\"80\" alt=\"musepack logo\">                                                                          |\n| MPEG 4        | mp4, m4a, m4v, aac              | [:link:](https://wikipedia.org/wiki/MPEG-4)                        | <img src=\"https://svgshare.com/i/8Ss.svg\" width=\"40\" alt=\"AAC logo\">                                                                          |\n| Ogg / Opus    |                                 | [:link:](https://wikipedia.org/wiki/Opus_(audio_format))           | <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/02/Opus_logo2.svg\" width=\"80\" alt=\"Opus logo\">                                     |\n| Ogg / Speex   |                                 | [:link:](https://wikipedia.org/wiki/Speex)                         | <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b5/Speex_logo_2006.svg\" width=\"80\" alt=\"Speex logo\">                               |\n| Ogg / Vorbis  |                                 | [:link:](https://wikipedia.org/wiki/Ogg_Vorbis)                    | <img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8d/Xiph.Org_logo_square.svg\" width=\"70\" alt=\"Vorbis logo\">                                |\n| WAV           |                                 | [:link:](https://wikipedia.org/wiki/WAV)                           | <img src=\"https://www.shareicon.net/download/2015/12/08/684232_file.svg\" width=\"60\" alt=\"WAV logo\">                                           |\n| WV            | WavPack                         | [:link:](https://wikipedia.org/wiki/WavPack)                       | <img src=\"http://www.wavpack.com/wavpacklogo.svg\" width=\"60\" alt=\"WavPack logo\">                                                              |\n| WMA           | Windows Media Audio             | [:link:](https://wikipedia.org/wiki/Windows_Media_Audio)           | <img src=\"https://upload.wikimedia.org/wikipedia/commons/7/76/Windows_Media_Player_simplified_logo.svg\" width=\"40\" alt=\"Windows Media logo\">  |\n\n### Supported tag headers\n\nFollowing tag header formats are supported:\n*   [APE](https://wikipedia.org/wiki/APE_tag)\n*   [ASF](https://wikipedia.org/wiki/Advanced_Systems_Format)\n*   EXIF 2.3\n*   [ID3](https://wikipedia.org/wiki/ID3): ID3v1, ID3v1.1, ID3v2.2, [ID3v2.3](http://id3.org/id3v2.3.0) & [ID3v2.4](http://id3.org/id3v2.4.0-frames)\n*   [iTunes](https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata)\n*   [RIFF](https://wikipedia.org/wiki/Resource_Interchange_File_Format)/INFO\n*   [Vorbis comment](https://wikipedia.org/wiki/Vorbis_comment)\n\nSupport for [MusicBrainz](https://musicbrainz.org/) tags as written by [Picard](https://picard.musicbrainz.org/).\n\n### Audio format & encoding details\n\nSupport for encoding / format details:\n*   [Bit rate](https://wikipedia.org/wiki/Bit_rate)\n*   [Audio bit depth](https://wikipedia.org/wiki/Audio_bit_depth)\n*   Duration\n*   Encoding profile (e.g. [CBR](https://en.wikipedia.org/wiki/Constant_bitrate), V0, V2)\n  \n\n## Online demo's\n*   [<img src=\"https://gitcdn.xyz/repo/Borewit/audio-tag-analyzer/master/src/assets/icon/audio-tag-analyzer.svg\" width=\"40\">Audio Tag Analyzer](https://audio-tag-analyzer.netlify.com/)\n*   [<img src=\"https://svgshare.com/i/8uW.svg\" width=\"40\"> Webamp](https://webamp.org/)\n\n## Compatibility\n\nThe JavaScript in runtime is compliant with [ECMAScript 2015 (ES6)](https://nodejs.org/en/docs/es6/).\n\n### Browser Support\n\nAlthough music-metadata is designed to run in Node.js, it can also be used to run in the browser:\n*   [music-metadata-browser](https://github.com/Borewit/music-metadata-browser) is better suitable to run in the browser.\n\nTo avoid Node `fs` dependency inclusion, you may use a sub-module inclusion:\n```JavaScript\nimport * as mm from 'music-metadata/lib/core';\n```\n\n| function                                             | `music-metadata`           | `music-metadata/lib/core`  |\n| -----------------------------------------------------| ---------------------------|----------------------------|\n| [`parseBuffer`](#parsefile-function)                 | ✓                          | ✓                          |\n| [`parseStream`](#parsestream-function) *             | ✓                          | ✓                          |\n| [`parseFromTokenizer`](#parsefromtokenizer-function) | ✓                          | ✓                          |\n| [`parseFile`](#parsefile-function)                   | ✓                          |                            |\n\n### Donation\nNot required, but would be extremely motivating.\n[PayPal.me](https://paypal.me/borewit)\n\n## Usage\n\n### Installation\nInstall via [npm](http://npmjs.org/):\n\n```bash\nnpm install music-metadata\n```\nor yarn\n```bash\nyarn add music-metadata\n```\n\n### Import music-metadata\n\nThis is how you can import music-metadata in JavaScript, in you code:\n```JavaScript\nvar mm = require('music-metadata');\n```\n\nThis is how it's done in TypeScript:\n```TypeScript\nimport * as mm from 'music-metadata';\n```\n\n### Module Functions\n\nThere are two ways to parse (read) audio tracks:\n1) Audio (music) files can be parsed using direct file access using the [parseFile function](#parsefile)\n2) Using [Node.js streams](https://nodejs.org/api/stream.html) using the [parseStream function](#parseStream).\n\nDirect file access tends to be a little faster, because it can 'jump' to various parts in the file without being obliged to read intermediate date.\n\n#### parseFile function\n\nParses the specified file (`filePath`) and returns a promise with the metadata result (`IAudioMetadata`).\n\n```TypeScript\nparseFile(filePath: string, opts: IOptions = {}): Promise<IAudioMetadata>`\n```\n\nJavascript example:\n```javascript\nconst mm = require('music-metadata');\nconst util = require('util')\n\nmm.parseFile('../test/samples/MusicBrainz-multiartist [id3v2.4].V2.mp3', {native: true})\n  .then( metadata => {\n    console.log(util.inspect(metadata, { showHidden: false, depth: null }));\n  })\n  .catch( err => {\n    console.error(err.message);\n  });\n```\n\nTypescript example:\n```javascript\nimport * as mm from 'music-metadata';\nimport * as util from 'util';\n\nmm.parseFile('../test/samples/MusicBrainz-multiartist [id3v2.4].V2.mp3')\n  .then( metadata => {\n    console.log(util.inspect(metadata, {showHidden: false, depth: null}));\n  })\n  .catch((err) => {\n    console.error(err.message);\n  });\n```\n\n#### parseStream function\n\nParses the provided audio stream for metadata.\nIt is recommended to provide the corresponding [MIME-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types). \nAn extension (e.g.: `.mp3`), filename or path will also work.\nIf the MIME-type or filename is not provided, or not understood, music-metadata will try to derive the type from the content.\n\n```TypeScript\nparseStream(stream: Stream.Readable, mimeType?: string, opts?: IOptions = {}): Promise<IAudioMetadata>`\n```\n\nExample:\n```javascript\nmm.parseStream(someReadStream, 'audio/mpeg', { fileSize: 26838 })\n  .then( metadata => {\n     console.log(util.inspect(metadata, { showHidden: false, depth: null }));\n     someReadStream.destroy();\n   });\n```\n\n#### parseBuffer function\n\nParses content of the provided buffer for metadata.\n\n```TypeScript\nparseBuffer(buffer: Buffer, mimeType?: string, opts?: IOptions = {}): Promise<IAudioMetadata>\n```\n\nExample:\n```javascript\nmm.parseBuffer(someBuffer, 'audio/mpeg', { fileSize: 26838 })\n  .then( metadata => {\n    console.log(util.inspect(metadata, { showHidden: false, depth: null }));\n   });\n```\n\n#### orderTags function\n\nUtility to Converts the native tags to a dictionary index on the tag identifier\n\n```TypeScript\norderTags(nativeTags: ITag[]): [tagId: string]: any[]\n```\n\n#### ratingToStars function\n\nCan be used to convert the normalized rating value to the 0..5 stars, where 0 an undefined rating, 1 the star the lowest rating and 5 the highest rating.\n\n```TypeScript\nratingToStars(rating: number): number\n```\n\n### Options\n*   `duration`: default: `false`, if set to `true`, it will parse the whole media file if required to determine the duration.\n*   `fileSize`: only provide this in combination with `parseStream` function.\n*   `native`: default: `false`, if set to `true`, it will return native tags in addition to the `common` tags.\n*   `observer: (update: MetadataEvent) => void;`: Will be called after each change to `common` (generic) tag, or `format` properties.\n*   `skipCovers`: default: `false`, if set to `true`, it will not return embedded cover-art (images).\n*   `skipPostHeaders? boolean` default: `false`, if set to `true`, it will not search all the entire track for additional headers. Only recommenced to use in combination with streams.\n\nAlthough in most cases duration is included, in some cases it requires `music-metadata` parsing the entire file.\nTo enforce parsing the entire file if needed you should set `duration` to `true`.\n    \n### Metadata result\n\nIf the returned promise resolves, the metadata (TypeScript `IAudioMetadata` interface) contains:\n*   [`format: IFormat`](#format) Audio format information\n*   `native: INativeTags` List of native (original) tags found in the parsed audio file. If the native option is set to false, this property is not defined.\n*   [`common: ICommonTagsResult`](doc/common_metadata.md) Is a generic (abstract) way of reading metadata information. \n  \n#### Format\n  \nAudio format information. Defined in the TypeScript `IFormat` interface:\n*   `dataformat?: string` Audio encoding format. e.g.: 'flac'\n*   `tagTypes?: TagType[]`  List of tagging formats found in parsed audio file\n*   `duration?: number` Duration in seconds\n*   `bitrate?: number` Number bits per second of encoded audio file\n*   `sampleRate?: number` Sampling rate in Samples per second (S/s)\n*   `bitsPerSample?: number` Audio bit depth\n*   `encoder?` Encoder name\n*   `codecProfile?: string` Codec profile\n*   `lossless?: boolean` True if lossless,  false for lossy encoding\n*   `numberOfChannels?: number` Number of audio channels\n*   `numberOfSamples?: number` Number of samples frames, one sample contains all channels. The duration is: numberOfSamples / sampleRate\n  \n#### Common\n\n[Common tag documentation](doc/common_metadata.md) is automatically generated.\n\n## Examples\n\nIn order to read the duration of a stream (with the exception of file streams), in some cases you should pass the size of the file in bytes.\n```javascript\nmm.parseStream(someReadStream, 'audio/mpeg', { duration: true, fileSize: 26838 })\n  .then( function (metadata) {\n     console.log(util.inspect(metadata, { showHidden: false, depth: null }));\n     someReadStream.close();\n   });\n```\n\n## Licence\n\n(The MIT License)\n\nCopyright (c) 2017 Borewit\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/borewit/music-metadata.git"
  },
  "scripts": {
    "build": "npm run clean && npm run compile && npm run doc-gen",
    "clean": "del-cli lib/** src/**/*.js src/**/*.js.map src/**/*.d.ts test/**/*.js test/**/*.js.map",
    "compile": "npm run compile-src && npm run compile-test && npm run compile-doc",
    "compile-doc": "tsc -p doc-gen",
    "compile-src": "tsc -p src",
    "compile-test": "tsc -p test",
    "doc-gen": "node doc-gen/gen.js",
    "lint": "npm run lint-md && npm run lint-ts",
    "lint-md": "remark -u preset-lint-recommended .",
    "lint-ts": "tslint 'src/**/*.ts' --exclude 'src/**/*.d.ts' 'test/**/*.ts' --exclude 'test/**/*.d.ts' 'doc-gen/**/*.ts'",
    "send-codacy": "nyc report --reporter=text-lcov | codacy-coverage",
    "send-coveralls": "nyc report --reporter=text-lcov | coveralls",
    "start": "npm-run-all compile lint cover-test",
    "test": "mocha --require ts-node/register --full-trace test",
    "test-coverage": "nyc npm run test"
  },
  "testling": {
    "files": [
      "test/test-js-*.js",
      "test/js-*.js"
    ],
    "browsers": [
      "firefox/latest",
      "chrome/latest",
      "safari/latest"
    ]
  },
  "typings": "lib/index",
  "version": "3.5.0"
}
